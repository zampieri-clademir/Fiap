<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TechChallenge_1.API</name>
    </assembly>
    <members>
        <member name="M:TechChallenge_1.API.Base.PublicController.IsAlive">
            <summary>
            Informa para o client que está ativa
            Útil para validar tokens e para descobrir o estado da API
            </summary>
        </member>
        <member name="T:TechChallenge_1.API.Exceptions.ExceptionPayload">
             <summary>
              Classe que representa uma exceção lançada para o client como resposta.
            </summary>
        </member>
        <member name="M:TechChallenge_1.API.Exceptions.ExceptionPayload.New``1(``0,System.Int32,System.Collections.Generic.IEnumerable{TechChallenge_1.API.Exceptions.ValidationFailure})">
            <summary>
            Método para criar um novo ExceptionPayload de uma exceção de negócio.
                     
            As exceções de negócio, que são providas no NDD.Configuracoes.Portal.Domain
            são identificadas pelos códigos no enum ErrorCodes. 
            
            Assim, esse método monta o ExceptionPayload, que será o código retornado o cliente, 
            com base na exceção lançada.
            
            </summary>
            <param name="exception">É a exceção lançada</param>
            <param name="errorCode">Código HTTP de erro</param>
            <param name="failures">Lista de problemas de validação</param>
            <returns>ExceptionPayload contendo o código do erro e a mensagem da da exceção que foi lançada </returns>
        </member>
        <member name="M:TechChallenge_1.API.Features.Contato.ContatoController.AdicionarContato(TechChallenge_1.Application.Features.Contato.AdicionarContato.AdicionarContatoCommand)">
            <summary>
            Adiciona novo contato
            </summary>
            <param name="contatoCommand">Contém as informações necessarias para criar um contato</param>
            <response code="200">Success, Chamada realizada com sucesso.</response>
            <response code="400">Bad Request, chamada inválida.</response>
            <returns></returns>
        </member>
        <member name="M:TechChallenge_1.API.Features.Contato.ContatoController.RemoverContato(TechChallenge_1.Application.Features.Contato.RemoverContato.RemoverContatoCommand)">
            <summary>
            Remove contato pelo identificador
            </summary>
            <param name="contatoCommand">Contém as informações necessarias para remover um contato</param>
            <response code="200">Success, Chamada realizada com sucesso.</response>
            <response code="400">Bad Request, chamada inválida.</response>
            <returns></returns>
        </member>
        <member name="M:TechChallenge_1.API.Features.Contato.ContatoController.BuscarContato(NDD.Portal.NFe.Application.Features.Emissao.Queries.BuscarDocumento.BuscarContatoQuery)">
            <summary>
            Busca Contato pelo filtro informado
            </summary>
            <param name="filtro">Filtro especificado pelo cliente</param>
            <response code="200">Success, Chamada realizada com sucesso</response>
            <response code="400">Bad Request, chamada inválida</response>
        </member>
    </members>
</doc>
