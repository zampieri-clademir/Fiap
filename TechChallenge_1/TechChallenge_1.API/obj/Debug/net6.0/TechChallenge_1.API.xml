<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TechChallenge_1.API</name>
    </assembly>
    <members>
        <member name="M:TechChallenge_1.API.Base.ApiControllerBase.HandleQuery``2(NDD.Space.Base.Domain.Result{System.Exception,``0})">
            <summary>
            Manuseia o result. Verifica se a resposta é uma falha ou sucesso, retornando os dados apropriados.
            É importante destacar que este método realiza o mapeamento da classe TSource em TResult
            </summary>
            <typeparam name="TSource">Classe de origem (ex.: domínio)</typeparam>
            <typeparam name="TResult">ViewModel</typeparam>
            <param name="result">Objeto Result retornado pelas chamadas.</param>
            <returns>Resposta apropriada baseado no result enviado como parâmetro</returns>
        </member>
        <member name="M:TechChallenge_1.API.Base.ApiControllerBase.HandleFailure``1(``0)">
            <summary>
            Verifica a exceção passada por parametro para passar o StatusCode correto para o frontend.
            </summary>
            <typeparam name="T">Qualquer classe que herde de Exeption</typeparam>
            <param name="exceptionToHandle">obj de exceção</param>
            <returns></returns>
        </member>
        <member name="M:TechChallenge_1.API.Base.PublicController.IsAlive">
            <summary>
            Informa para o client que está ativa
            Útil para validar tokens e para descobrir o estado da API
            </summary>
        </member>
        <member name="T:TechChallenge_1.API.Exceptions.ExceptionPayload">
             <summary>
              Classe que representa uma exceção lançada para o client como resposta.
            </summary>
        </member>
        <member name="M:TechChallenge_1.API.Exceptions.ExceptionPayload.New``1(``0,System.Int32,System.Collections.Generic.IEnumerable{TechChallenge_1.API.Exceptions.ValidationFailure})">
            <summary>
            Método para criar um novo ExceptionPayload de uma exceção de negócio.
                     
            As exceções de negócio, que são providas no NDD.Configuracoes.Portal.Domain
            são identificadas pelos códigos no enum ErrorCodes. 
            
            Assim, esse método monta o ExceptionPayload, que será o código retornado o cliente, 
            com base na exceção lançada.
            
            </summary>
            <param name="exception">É a exceção lançada</param>
            <param name="errorCode">Código HTTP de erro</param>
            <param name="failures">Lista de problemas de validação</param>
            <returns>ExceptionPayload contendo o código do erro e a mensagem da da exceção que foi lançada </returns>
        </member>
        <member name="M:TechChallenge_1.API.Features.Feature.FeatureController.FeaturePostAsync(TechChallenge_1.Application.Features.NomeFeature.FeatureCommand)">
            <summary>
            Descrição metodo template
            </summary>
            <param name="featureCommand">Contém as informações necessarias do command</param>
            <response code="200">Success, Chamada realizada com sucesso.</response>
            <response code="400">Bad Request, chamada inválida.</response>
            <returns></returns>
        </member>
        <member name="M:TechChallenge_1.API.Filters.ExceptionHandlerAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Método invocado quando ocorre uma exceção no controller
            </summary>
            <param name="context">É o contexto atual da requisição</param>
        </member>
    </members>
</doc>
